<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:e="net.joyfl.evermind.components.*"
		title="Evermind" destructionPolicy="never"
		creationComplete="init()" add="onAdd()" mouseMove="onMouseMove( event )" mouseUp="onMouseUp( event )">
	<fx:Script>
		<![CDATA[
			import flash.utils.setTimeout;
			
			import mx.collections.ArrayList;
			import mx.events.CloseEvent;
			
			import spark.components.supportClasses.ViewReturnObject;
			
			import net.joyfl.evermind.components.Alert;
			import net.joyfl.evermind.events.EvermindEvent;
			import net.joyfl.evermind.loader.MapLoader;
			import net.joyfl.evermind.models.MapMetadata;
			import net.joyfl.evermind.renderers.MapListItemRenderer;
			
			[Bindable]
			private var maps : ArrayList = new ArrayList();
			
			private var _loadingAlert : Alert;
			
			private var _loader : MapLoader = new MapLoader();
			
			private var _longTouchTimer : Timer = new Timer( 500 );
			private var _selectedMap : MapMetadata;
			
			private function init() : void
			{
				_loadingAlert = Alert.show( this, "", "마인드맵 목록을 불러오고 있습니다." );
				
				_loader.addEventListener( EvermindEvent.LIST_MAPS, onListMaps );
				_loader.addEventListener( EvermindEvent.CREATE_MAP, onCreateMap );
				_loader.addEventListener( EvermindEvent.DELETE_MAP, onDeleteMap );
				_loader.listMaps();
				
				_longTouchTimer.addEventListener( TimerEvent.TIMER, onTimer );
			}
			
			private function onAdd() : void
			{
				var returnObj : ViewReturnObject = navigator.poppedViewReturnedObject;
				if( !returnObj || ( !returnObj.context && !returnObj.object ) || !returnObj.object.changed )
					return;
				
				var metadata : MapMetadata = maps.getItemAt( returnObj.object.index ) as MapMetadata;
				metadata.title = returnObj.object.metadata.title;
				metadata.thumbnail = returnObj.object.metadata.thumbnail;
				metadata.modified = returnObj.object.metadata.modified;
				maps.setItemAt( metadata, returnObj.object.index );
			}
			
			private function onListMaps( e : EvermindEvent ) : void
			{
				for( var i : int = 0; i < e.data.length; i++ )
				{
					maps.addItem( e.data[i] );
				}
				
				if( _loadingAlert && _loadingAlert.isOpen )
					setTimeout( _loadingAlert.close, 500 );
			}
			
			private function onMapListClick( e : MouseEvent ) : void
			{
				if( e.target.parentDocument is MapListItemRenderer && _longTouchTimer.currentCount == 0 )
				{
					var mapRenderer : MapListItemRenderer = e.target.parentDocument as MapListItemRenderer;
					var mapItem : MapMetadata = mapRenderer.data as MapMetadata;
					navigator.pushView( MapEditorActivity, {mapId: mapItem.mapId, index: mapList.selectedIndex} );
				}
			}
			
			private function onMapListMouseDown( e : MouseEvent ) : void
			{
				if( e.target.parentDocument is MapListItemRenderer )
				{
					_selectedMap = e.target.parentDocument.data as MapMetadata;
					_longTouchTimer.reset();
					_longTouchTimer.start();
				}
			}
			
			private function onMouseMove( e : MouseEvent ) : void
			{
				_longTouchTimer.stop();
			}
			
			private function onMouseUp( e : MouseEvent ) : void
			{
				_longTouchTimer.stop();
			}
			
			private function onTimer( e : TimerEvent ) : void
			{
				_longTouchTimer.stop();
				
				Alert.show( this, "경고", "삭제하시겠습니까?", ["예", "아니오"], onAlertClose, true );
			}
			
			private function onAlertClose( e : CloseEvent ) : void
			{
				if( e.detail == 0 )
				{
					_loadingAlert = Alert.show( this, "", "삭제중입니다." );
					_loader.deleteMap( _selectedMap.mapId );
				}
			}
			
			private function onDeleteMap( e : EvermindEvent ) : void
			{
				for each( var map : MapMetadata in maps.source )
				{
					if( map.mapId == e.data )
					{
						maps.removeItem( map );
					}
				}
				
				_loadingAlert.close();
			}
			
			private function onAddButtonClick( e : MouseEvent ) : void
			{
				_loadingAlert = Alert.show( this, "", "새 마인드맵을 생성중입니다." );
				setTimeout( _loader.createMap, 100 );
			}
			
			private function onCreateMap( e : EvermindEvent ) : void
			{
				_loadingAlert.close();
				
				var metadata : MapMetadata = new MapMetadata();
				metadata.mapId = e.data.mapId
				maps.addItem( metadata );
				navigator.pushView( MapEditorActivity, {mapId: e.data.mapId, index: maps.length - 1} );
			}
			
			private function onAlignButtonClick( e : MouseEvent ) : void
			{
				trace( "Align" );
			}
			
			private function onSearchButtonClick( e : MouseEvent ) : void
			{
				trace( "Search" );
			}
			
			private function onOverflowButtonClick( e : MouseEvent ) : void
			{
				navigator.pushView( PreferencesActivity );
			}
		]]>
	</fx:Script>
	
	<s:layout>
		<s:VerticalLayout gap="0" />
	</s:layout>
	
	<s:List id="mapList" width="100%" height="100%"
			dataProvider="{maps}" itemRenderer="net.joyfl.evermind.renderers.MapListItemRenderer"
			click="onMapListClick(event)" mouseDown="onMapListMouseDown( event )"
			contentBackgroundColor="#F2F2F2" />
	<s:Line width="100%">
		<s:stroke>
			<s:SolidColorStroke color="#999999" caps="square" />
		</s:stroke>
	</s:Line>
	
	<!-- 하단 액션바 -->
	<s:Group width="100%" height="72">
		<s:Rect width="100%" height="100%">
			<s:fill>
				<s:SolidColor color="#DDDDDD" />
			</s:fill>
		</s:Rect>
		
		<s:HGroup left="0" right="0" height="72" verticalCenter="0" horizontalAlign="left" gap="20">
			<e:ActionBarButton left="10" image="@Embed('/../res/button_add.png')" backgroundImage="@Embed('/../res/bottom_actionbar_button_bg.png')" alpha="0.6" click="onAddButtonClick( event )" />
		</s:HGroup>
		
		<s:HGroup left="0" right="0" height="72" verticalCenter="0" horizontalAlign="right" gap="0">
			<!--
			<e:ActionBarButton image="@Embed('/../res/button_align.png')" backgroundImage="@Embed('/../res/bottom_actionbar_button_bg.png')" alpha="0.6" click="onAlignButtonClick( event )" />
			<e:ActionBarButton image="@Embed('/../res/button_search.png')" backgroundImage="@Embed('/../res/bottom_actionbar_button_bg.png')" alpha="0.6" click="onSearchButtonClick( event )" />
			-->
			<e:ActionBarButton image="@Embed('/../res/button_settings.png')" backgroundImage="@Embed('/../res/bottom_actionbar_button_bg.png')" alpha="0.6" click="onOverflowButtonClick( event )" />
		</s:HGroup>
		
	</s:Group>
</s:View>
