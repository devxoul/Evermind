<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:e="net.joyfl.evermind.components.*"
		creationComplete="init()"
		gestureZoom="gestureZoomHandler(event)"
		enterFrame="enterFrameHandler(event)"
		mouseDown="/*stage.focus = null*/">
	
	<fx:Script>
		<![CDATA[
			import net.joyfl.evermind.controller.NodeController;
			import net.joyfl.evermind.events.EvermindEvent;
			import net.joyfl.evermind.loader.MapLoader;
			import net.joyfl.evermind.models.Map;
			import net.joyfl.evermind.node.NodeContainer;
			import net.joyfl.evermind.node.NodeView;
			
			private var _loader : MapLoader = new MapLoader();
			
			private var _map : Map;
			
			private var nodeScale:Number;
			private var nodeViewContainer:Sprite;
			private var nodeView:NodeView;
			private var nodeContainer:NodeContainer;
			private var nodeController:NodeController;
			
			private function init() : void
			{
				nodeScale = 1;
				_loader.addEventListener( EvermindEvent.GET_MAP, onGetMap );
				_loader.getMap( data.mapId );
			}
			
			private function onGetMap( e : EvermindEvent ) : void
			{
				_loader.removeEventListener( EvermindEvent.LIST_MAPS, onGetMap );
				
				_map = e.data as Map;
				
				titleInput.text = _map.metadata.title;
				
				nodeViewContainer = new Sprite;
				nodeView = new NodeView( _map.node );
				nodeViewContainer.addChild( nodeView );
				nodeController = new NodeController( stage, _map.node, nodeView );
				
				nodeViewContainer.x = canvas.width / 2;
				nodeViewContainer.y = canvas.height / 2;
				
				canvas.addChild( nodeViewContainer );
			}
			
			private function onUndoButtonClick( e : MouseEvent ) : void
			{
				trace( "Undo" );
			}
			
			private function onRedoButtonClick( e : MouseEvent ) : void
			{
				trace( "Redo" );				
			}
			
			private function onMediaButtonClick( e : MouseEvent ) : void
			{
				trace( "Media" );
			}
			
			private function onOverflowButtonClick( e : MouseEvent ) : void
			{
				trace( "Overflow" );
			}
			
			protected function gestureZoomHandler( e : TransformGestureEvent ) : void
			{
				nodeScale *= ( e.scaleX + e.scaleY ) / 2;
			}
			
			protected function enterFrameHandler ( e : Event ) : void
			{
				nodeViewContainer.scaleX = nodeViewContainer.scaleY += (nodeScale-nodeViewContainer.scaleY) * 0.5;
			}
			
		]]>
	</fx:Script>
	
	<s:navigationContent>
		<e:ActionBarButton image="@Embed('/../res/button_undo.png')" backgroundImage="@Embed('/../res/bottom_actionbar_button_bg.png')" click="onUndoButtonClick( event )" />
		<e:ActionBarButton image="@Embed('/../res/button_redo.png')" backgroundImage="@Embed('/../res/bottom_actionbar_button_bg.png')" click="onRedoButtonClick( event )" />
		<e:ActionBarButton image="@Embed('/../res/button_media.png')" backgroundImage="@Embed('/../res/bottom_actionbar_button_bg.png')" click="onMediaButtonClick( event )" />
	</s:navigationContent>
	
	<s:actionContent>
		<e:ActionBarButton image="@Embed('/../res/button_overflow_green.png')" backgroundImage="@Embed('/../res/bottom_actionbar_button_bg.png')" click="onOverflowButtonClick( event )" />
	</s:actionContent>
	
	<s:SpriteVisualElement id="canvas" width="100%" height="100%" />
	
	<s:TextInput id="titleInput" left="20" right="20" top="5" contentBackgroundAlpha="0" borderVisible="false" textAlign="center" color="#464F4E" fontWeight="bold" />
	<s:Line left="20" right="20" top="62">
		<s:stroke>
			<s:SolidColorStroke color="#42A79F" weight="2" caps="square" />					
		</s:stroke>
	</s:Line>
</s:View>
