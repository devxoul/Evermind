<?xml version="1.0" encoding="utf-8"?>
<s:View xmlns:fx="http://ns.adobe.com/mxml/2009" 
		xmlns:s="library://ns.adobe.com/flex/spark"
		xmlns:e="net.joyfl.evermind.components.*"
		creationComplete="init()"
		mouseDown="/*stage.focus = null*/"
		backKeyPressed="onBackKeyPressed( event )">
	
	<fx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			
			import net.joyfl.evermind.controller.NodeController;
			import net.joyfl.evermind.events.EvermindEvent;
			import net.joyfl.evermind.loader.MapLoader;
			import net.joyfl.evermind.models.Map;
			import net.joyfl.evermind.node.NodeContainer;
			import net.joyfl.evermind.node.NodeView;
			
			private var _loader : MapLoader = new MapLoader();
			
			private var _map : Map;
			
			private var nodeScale:Number;
			private var nodeViewContainer:Sprite;
			private var nodeView:NodeView;
			private var nodeController:NodeController;
			
			/**
			 * 뒤로가기 버튼 클릭 후 onSetMap에서 _back이 true일 경우 리스트로 돌아감
			 */
			private var _back : Boolean;
			
			private function init() : void
			{
				nodeScale = 1;
				
				_loader.addEventListener( EvermindEvent.GET_MAP, onGetMap );
				_loader.addEventListener( EvermindEvent.SET_MAP, onSetMap );
				_loader.getMap( data.mapId );
			}
			
			private function onGetMap( e : EvermindEvent ) : void
			{
				_loader.removeEventListener( EvermindEvent.LIST_MAPS, onGetMap );
				
				_map = e.data as Map;
				
				titleInput.text = _map.metadata.title;
				
				nodeViewContainer = new Sprite;
				nodeView = new NodeView( _map.node );
				nodeViewContainer.addChild( nodeView );
				nodeController = new NodeController( this, _map.node, nodeView );
				
				nodeController.container.textFormat.font = '_sans';
				nodeController.container.syncTextFormat();
				
				nodeViewContainer.x = canvas.width / 2;
				nodeViewContainer.y = canvas.height / 2;
				
				canvas.addChild( nodeViewContainer );
				addEventListener( Event.ENTER_FRAME, enterFrameHandler );
			}
			
			private function save() : void
			{
				_map.metadata.title = titleInput.text;
				_map.metadata.thumbnail = nodeView.getSnapshot();
				
				_loader.setMap( _map );
			}
			
			private function nodeUndo () :void
			{
				if( !nodeController.history.canUndo ) return;
				nodeController.container = nodeView.container = nodeController.history.undo();
				nodeView.render();
			}
			
			private function nodeRedo () :void
			{
				if( !nodeController.history.canRedo ) return;
				nodeController.container = nodeView.container = nodeController.history.redo();
				nodeView.render();
			}
			
			private function onSetMap( e : EvermindEvent ) : void
			{
				if( e.data == true )
				{
					trace( "저장됨" );
					
					if( _back )
						navigator.popView();
				}
			}
			
			private function onRemoveButtonClick ( e : MouseEvent ) : void
			{
				nodeController.removeSelectedNode();
			}
			
			private function onTitleButtonClick( e : MouseEvent ) : void
			{
				// hide title
				if( currentState == "title" )
				{
					titleView.visible = false;
					currentState = "noTitle";
				}
				
				// show title
				else
				{
					titleView.visible = true;
					currentState = "title";
				}
			}
			
			protected function gestureZoomHandler( e : TransformGestureEvent ) : void
			{
				nodeScale *= ( e.scaleX + e.scaleY ) / 2;
			}
			
			protected function enterFrameHandler ( e : Event ) : void
			{
				// undo, redo test
				if( nodeController.history.canRedo ) redo.enabled = true;
				else redo.enabled = false;
				if( nodeController.history.canUndo ) undo.enabled = true;
				else undo.enabled = false;
				
				nodeViewContainer.scaleX = nodeViewContainer.scaleY += (nodeScale-nodeViewContainer.scaleY) * 0.5;
			}
			
			protected function onCanvasMouseDown( e : MouseEvent) : void
			{
				scroller.setStyle( "horizontalScrollPolicy", "off" );
				scroller.setStyle( "verticalScrollPolicy", "off" );
				
			}
			
			protected function onScrollerMouseUp( e : MouseEvent ) : void
			{
				scroller.setStyle( "horizontalScrollPolicy", "on" );
				scroller.setStyle( "verticalScrollPolicy", "on" );
			}
			
			private function onBackKeyPressed( e : FlexEvent ) : void
			{
				e.preventDefault();
				
				_back = true;
				save();
			}
			
			override public function createReturnObject() : Object
			{
				return {
					metadata: _map.metadata,
					index: data.index
				};
			}
		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="title" />
		<s:State name="noTitle" />
	</s:states>
	
	<s:navigationContent>
		<e:ActionBarButton id="undo" image="@Embed('/../res/button_undo.png')" backgroundImage="@Embed('/../res/bottom_actionbar_button_bg.png')" click="nodeUndo()" />
		<e:ActionBarButton id="redo" image="@Embed('/../res/button_redo.png')" backgroundImage="@Embed('/../res/bottom_actionbar_button_bg.png')" click="nodeRedo()" />
		<e:ActionBarButton id="removeBtn" image="@Embed('/../res/button_delete.png')" backgroundImage="@Embed('/../res/bottom_actionbar_button_bg.png')" click="onRemoveButtonClick( event )" />
	</s:navigationContent>
	
	<s:actionContent>
		<e:ActionBarButton image.title="@Embed('/../res/button_hide_title.png')" image.noTitle="@Embed('/../res/button_show_title.png')"
						   backgroundImage="@Embed('/../res/bottom_actionbar_button_bg.png')" click="onTitleButtonClick( event )" />
	</s:actionContent>
	
	<s:Scroller id="scroller" top.title="65" top.noTitle="0" width="100%" height="100%" gestureZoom="gestureZoomHandler(event)" mouseUp="onScrollerMouseUp( event )">
		<s:Group id="scrollerContent" horizontalScrollPosition="1808" verticalScrollPosition="1748">
			<s:SpriteVisualElement id="canvas" width="4096" height="4096" mouseDown="onCanvasMouseDown( event )" />
		</s:Group>
	</s:Scroller>
	
	<s:Group id="titleView" left="0" right="0">
		<s:hideEffect>
			<s:Move yTo="-50" />
		</s:hideEffect>
		
		<s:showEffect>
			<s:Move yTo="0" />
		</s:showEffect>
		
		<s:TextInput id="titleInput" left="20" right="20" top="5" contentBackgroundAlpha="0" borderVisible="false" textAlign="center" color="#464F4E" fontWeight="bold" />
		<s:Line left="20" right="20" top="62">
			<s:stroke>
				<s:SolidColorStroke color="#42A79F" weight="2" caps="square" />					
			</s:stroke>
		</s:Line>
	</s:Group>
</s:View>
